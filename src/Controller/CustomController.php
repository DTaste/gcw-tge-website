<?php
namespace App\Controller;

use Symfony\Component\Translation\Translator;
use Symfony\Component\Translation\Loader\ArrayLoader;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Response;
use \Mailjet\Resources;
// doc : http://symfony.com/doc/current/controller.html
class CustomController extends Controller{

  /**

  $request->getPreferredLanguage(array('en', 'fr'));

  // retrieve GET variable
  $request->query->get('page');
  // retrieve POST variables
  $request->request->get('page');

  // retrieve SERVER variables
  $request->server->get('HTTP_HOST');

  // retrieves an instance of UploadedFile identified by foo
  $request->files->get('foo');

  // retrieve a COOKIE value
  $request->cookies->get('PHPSESSID');

  // retrieve an HTTP request header, with normalized, lowercase keys
  $request->headers->get('host');
  $request->headers->get('content_type');

  */


  protected function checkRole($role = 'ROLE_ADMIN'){
    return ($this->isGranted($role));
  }

  protected function detectLocale($request){
    return $request->getPreferredLanguage(explode('|',$this->getParameter('app.locales')));
  }

  protected function isLocaleAvailable($locale){
    $locales = explode('|',$this->getParameter('app.locales'));
    return in_array($locale, $locales);
  }
  protected function isAjax($request){
    return $request->isXmlHttpRequest();
  }

  protected function isPost($request){
    return $request->isMethod('POST');
  }

  protected function canUseWebp(){
    $user_agent = $_SERVER['HTTP_USER_AGENT'];
    return (stripos( $user_agent, 'Chrome') !== false) && !$this->isLocalEnv();
  }

  protected function getImageFormat(){
    return ($this->canUseWebp())? 'webp':'jpg';
  }

  public function isLocalEnv(){
    return ($_SERVER['HTTP_HOST'] == "localhost" || $_SERVER['HTTP_HOST'] == "192.168.1.1");
  }

  public function isDevEnv(){
    return $this->container->getParameter('kernel.environment')=="dev";
  }

  function backpage($params = array()){
    return $this->renderTemplate('backend/index.html.twig', $params);
  }

  function frontpage($params = array()){
    return $this->renderTemplate('frontend/index.html.twig', $params);
  }


  function renderTemplate($twigTemplate, $params = array()) : Response{
    $params ['base_dir'] = realpath($this->getParameter('kernel.root_dir').'/..').DIRECTORY_SEPARATOR;

    return $this->render($twigTemplate, $params);
  }

  protected function error($msg = 'Something went wrong!'){
    throw new \Exception($msg);
  }

  protected function error404($msg = 'This page does not exist!'){
    throw $this->createNotFoundException($msg);
  }



  protected function renderText($msg = ''){
    return new Response($msg);
  }
  protected function text($msg = ''){
    return new Response($msg);
  }



  protected function message($msg){
    $this->addFlash('notice', $msg);
  }
  protected function messageError($msg){
    $this->addFlash('error', $msg);
  }


  /**
  * @return string
  */
  protected function generateUniqueFileName($prefix)
  {
    // md5() reduces the similarity of the file names generated by
    // uniqid(), which is based on timestamps
    return $prefix.'-'.sha1(uniqid());
  }

  /**
  * return entity manager
  */
  protected function getEntityManager(){
    return $this->getDoctrine()->getManager();
  }
  /**
  * shortcut of method above
  */
  protected function getEm(){
    return $this->getEntityManager();
  }


  /**
  * return repository for db entities given their repository name (ex : 'AppBundle:Level')
  * doc : http://symfony.com/doc/current/doctrine.html
  */
  protected function getRepository($RepositoryName)
  {
    $em = $this->getEntityManager();
    return $em->getRepository($RepositoryName);
  }


  protected function getUserFromSession(){
    return $this->get('security.token_storage')->getToken()->getUser();
  }


  /**
  * @param string $templateName
  * @param array  $context
  * @param array  $fromEmail
  * @param string $toEmail
  */
  protected function sendEmail(\Swift_Mailer $mailer, \Twig_Environment $twig, $templateName, $context, $toEmail)
  {

    $fromEmail = $this->getParameter('mailer_contact');

    $template = $twig->load($templateName);
    $subject = $template->renderBlock('subject', $context);
    $textBody = $template->renderBlock('body_text', $context);

    $htmlBody = '';

    if ($template->hasBlock('body_html', $context)) {
      $htmlBody = $template->renderBlock('body_html', $context);
    }

    $message = (new \Swift_Message())
    ->setSubject($subject)
    ->setFrom($fromEmail)
    ->setTo($toEmail);

    if (!empty($htmlBody)) {
      $message->setBody($htmlBody, 'text/html')
      ->addPart($textBody, 'text/plain');
    } else {
      $message->setBody($textBody);
    }

    $mailer->send($message);
  }

  //see: https://dev.mailjet.com/guides/?php#contact_managemanycontacts
  // https://dev.mailjet.com/reference/email/contacts/bulk-contact-management/
  // action could be addnoforce, addforce, unsub, remove
  private function subsribeMailjetNewsletter( $mailingList, $action, $email, $name = false){

    // 1. create mailjet object
    $mj = new \Mailjet\Client($this->getParameter('mailer_user'), $this->getParameter('mailer_password'));

    // 2. create contact ? could be useless

    //$email  = 'ortega.sebastien+4@gmail.com';
    $user = ['Email' => $email, 'IsExcludedFromCampaigns' => ($action=='unsub' || $action=='remove')];

    if($name){
      $user['Name'] = $name;
      //can also add more key/value pair in $user['Properties']
    }
    /*
    // working !
    var_dump($user);
    $response = $mj->post(Resources::$Contact,['body' => $user]);
    echo '<br />';
    var_dump($response->getData());
    echo '<br /><hr /><br />';
    */

    // 3.1 add contact in mailing list

    /*
    // doesn't works
    $url = 'https://api.mailjet.com/v3/REST/contactslist/'.$mailingList.'/managemanycontacts';
    $contact = $user;
    $contact['Action'] = $action;
    $response = $mj->post($url, ['body'=>$contact]);
    //$response->success() && var_dump($response);
    //echo '<br /><hr /><br />';
    */
    //works now
    // 3.2 or add contactS in mailing list
    $body = [
      'ContactsLists' => [
        [
          'ListID' => $mailingList,
          'Action' => $action
        ],
      ],
      'Contacts' => [$user]
    ];


    $response = $mj->post(Resources::$ContactManagemanycontacts, ['body' => $body]);
    //$response->success() && var_dump($response->getData());

    //var_dump($response->getData());
    return $response->getData();

  }

  protected function subsribeNewsletterUser($email, $name = false, $action ='addforce'){
    $mailing_list = $this->getParameter('mailer_list_id');
    return $this->subsribeMailjetNewsletter( $mailing_list, $action, $email, $name);
  }
  protected function unsubsribeNewsletterUser($email, $name = false){
    return $this->subsribeNewsletterUser($email, $name, 'unsub');
  }
  protected function subsribeNewsletterPartner($email, $name = false, $action ='addforce'){
    $mailing_list = $this->getParameter('mailer_list_pro_id');
    return $this->subsribeMailjetNewsletter($mailing_list, $action, $email, $name);
  }
  protected function unsubsribeNewsletterPartner($email, $name = false){
    return $this->subsribeNewsletterPartner($email, $name, 'unsub');
  }

  protected function removeImage(\App\Entity\Attachment $img)
  {


    $caches = array('banner','header2','logo', 'content','facebook_share');
    foreach ($caches as $c){
      //echo $this->getParameter('app.public_dir').'media/cache/'.$c.'/'.$img->getUrl();
      @unlink($this->getParameter('app.public_dir').'media/cache/'.$c.'/'.$img->getUrl());
    }
    @unlink($this->getParameter('app.public_dir').$img->getUrl());
  }
}
?>
